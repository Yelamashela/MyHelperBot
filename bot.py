import os
import json
import logging
import datetime
import gspread
from google.oauth2.service_account import Credentials
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    ApplicationBuilder, CommandHandler, CallbackQueryHandler,
    MessageHandler, ConversationHandler, ContextTypes, filters
)

# --- –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ ---
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# --- –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è ---
BOT_TOKEN = os.getenv("BOT_TOKEN")
GOOGLE_CREDENTIALS = json.loads(os.getenv("GOOGLE_CREDENTIALS"))

# --- Google Sheets ---
try:
    scopes = ["https://www.googleapis.com/auth/spreadsheets", "https://www.googleapis.com/auth/drive"]
    credentials = Credentials.from_service_account_info(GOOGLE_CREDENTIALS, scopes=scopes)
    client = gspread.authorize(credentials)
    sheet = client.open("MyHelperBot_–ê–Ω–∫–µ—Ç—ã").sheet1
except Exception as e:
    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Google Sheets: {e}")
    sheet = None

# --- –°–æ—Å—Ç–æ—è–Ω–∏—è ---
LANG, PROFILE, NAME, LOCATION, DOB, CONCERN, FORMAT, TRIED, READY = range(9)
user_lang = {}

# --- –ú–µ–Ω—é –ø–æ –ø—Ä–æ—Ñ–∏–ª—é ---
def main_menu(profile):
    def btn(text, cb): return InlineKeyboardButton(text, callback_data=cb)
    if profile == "ü§± –Ø –º–∞–º–∞":
        return InlineKeyboardMarkup([
            [btn("ü©∫ –ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏", "services"), btn("üìö –ö—É—Ä—Å—ã", "courses")],
            [btn("üì• –ó–∞–ø–æ–ª–Ω–∏—Ç—å –∞–Ω–∫–µ—Ç—É", "form")],
            [btn("üìç –ö–æ–Ω—Ç–∞–∫—Ç—ã", "contacts")]
        ])
    elif profile == "ü§∞ –ë–µ—Ä–µ–º–µ–Ω–Ω–∞—è":
        return InlineKeyboardMarkup([
            [btn("ü§± –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ —Ä–æ–¥–∞–º", "doula")],
            [btn("üìö –ö—É—Ä—Å –¥–ª—è –±–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö", "pregnancy_course")],
            [btn("üìç –ö–æ–Ω—Ç–∞–∫—Ç—ã", "contacts")]
        ])
    elif profile == "ü©∫ –°–ø–µ—Ü–∏–∞–ª–∏—Å—Ç":
        return InlineKeyboardMarkup([
            [btn("üåü –ù–∞—Å—Ç–∞–≤–Ω–∏—á–µ—Å—Ç–≤–æ", "mentorship")],
            [btn("üìç –ö–æ–Ω—Ç–∞–∫—Ç—ã", "contacts")]
        ])
    return InlineKeyboardMarkup([[btn("üì• –ê–Ω–∫–µ—Ç–∞", "form")]])

# --- –°—Ç–∞—Ä—Ç ---
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [[
        InlineKeyboardButton("üá∑üá∫ –†—É—Å—Å–∫–∏–π", callback_data="lang_ru"),
        InlineKeyboardButton("üá∞üáø “ö–∞–∑–∞“õ—à–∞", callback_data="lang_kz")
    ]]
    await update.message.reply_text(
        "üë∂ <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ MyHelperBot!</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è:",
        reply_markup=InlineKeyboardMarkup(keyboard),
        parse_mode="HTML"
    )

# --- –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —è–∑—ã–∫–∞ ---
async def set_language(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    lang = "ru" if query.data == "lang_ru" else "kz"
    user_lang[query.from_user.id] = lang
    keyboard = [[
        InlineKeyboardButton("ü§± –Ø –º–∞–º–∞", callback_data="profile_mama"),
        InlineKeyboardButton("ü§∞ –ë–µ—Ä–µ–º–µ–Ω–Ω–∞—è", callback_data="profile_pregnant"),
        InlineKeyboardButton("ü©∫ –°–ø–µ—Ü–∏–∞–ª–∏—Å—Ç", callback_data="profile_doctor")
    ]]
    await query.edit_message_text("–ö—Ç–æ –≤—ã?", reply_markup=InlineKeyboardMarkup(keyboard))

# --- –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø—Ä–æ—Ñ–∏–ª—è ---
async def set_profile(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    profile_map = {
        "profile_mama": "ü§± –Ø –º–∞–º–∞",
        "profile_pregnant": "ü§∞ –ë–µ—Ä–µ–º–µ–Ω–Ω–∞—è",
        "profile_doctor": "ü©∫ –°–ø–µ—Ü–∏–∞–ª–∏—Å—Ç"
    }
    profile = profile_map[query.data]
    context.user_data["profile"] = profile
    await query.edit_message_text("‚úÖ –ü—Ä–æ—Ñ–∏–ª—å –≤—ã–±—Ä–∞–Ω!", reply_markup=main_menu(profile))

# --- –ê–Ω–∫–µ—Ç–∞ ---
questions = {
    NAME: "–ö–∞–∫ –≤–∞—Å –∑–æ–≤—É—Ç?",
    LOCATION: "–ì–æ—Ä–æ–¥/—Å—Ç—Ä–∞–Ω–∞:",
    DOB: "–î–∞—Ç–∞ —Ä–æ–¥–æ–≤ (–¥–¥.–º–º.–≥–≥–≥–≥):",
    CONCERN: "–ß—Ç–æ –≤–∞—Å –±–µ—Å–ø–æ–∫–æ–∏—Ç?",
    FORMAT: "–§–æ—Ä–º–∞—Ç: –æ–Ω–ª–∞–π–Ω / –æ—Ñ—Ñ–ª–∞–π–Ω / –≤—ã–µ–∑–¥?",
    TRIED: "–ß—Ç–æ —É–∂–µ –ø—Ä–æ–±–æ–≤–∞–ª–∏?",
    READY: "–ì–æ—Ç–æ–≤—ã –∫ —Ä–∞–±–æ—Ç–µ –∏ –æ–ø–ª–∞—Ç–µ?"
}

async def ask_question(update: Update, context: ContextTypes.DEFAULT_TYPE):
    idx = context.user_data.get("question", NAME)
    step = idx - NAME + 1
    await update.callback_query.message.reply_text(f"{questions[idx]}\n\nüìä –®–∞–≥ {step} –∏–∑ 7")
    context.user_data["question"] = idx
    return idx

async def handle_answer(update: Update, context: ContextTypes.DEFAULT_TYPE):
    idx = context.user_data.get("question")
    answer = update.message.text.strip()

    if idx == DOB:
        try:
            datetime.datetime.strptime(answer, "%d.%m.%Y")
        except:
            await update.message.reply_text("‚ùó –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –¥–¥.–º–º.–≥–≥–≥–≥")
            return idx

    context.user_data[idx] = answer
    idx += 1
    if idx > READY:
        if sheet:
            row = [context.user_data.get(i, '') for i in range(NAME, READY + 1)]
            sheet.append_row(row)
        await update.message.reply_text("‚úÖ –°–ø–∞—Å–∏–±–æ! –ú—ã —Å –≤–∞–º–∏ —Å–≤—è–∂–µ–º—Å—è –≤ —Ç–µ—á–µ–Ω–∏–µ 24—á.")
        profile = context.user_data.get("profile")
        await update.message.reply_text("üìã –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=main_menu(profile))
        return ConversationHandler.END
    context.user_data["question"] = idx
    await update.message.reply_text(questions[idx])
    return idx

# --- –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫ ---
async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    data = query.data

    if data == "services":
        await query.edit_message_text("ü©∫ –û–Ω–ª–∞–π–Ω –∏–ª–∏ –æ—Ñ–ª–∞–π–Ω?", reply_markup=InlineKeyboardMarkup([
            [InlineKeyboardButton("üßë‚Äçüíª –û–Ω–ª–∞–π–Ω", callback_data="online")],
            [InlineKeyboardButton("üè† –í—ã–µ–∑–¥ –Ω–∞ –¥–æ–º", callback_data="offline")],
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="menu")]
        ]))
    elif data == "online":
        await query.edit_message_text(
            "üìû <b>–û–Ω–ª–∞–π–Ω-–∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è</b> ‚Äî 2 —á–∞—Å–∞ –≤–∏–¥–µ–æ—Å–æ–∑–≤–æ–Ω–∞, 7 –¥–Ω–µ–π WhatsApp-—Å–æ–ø—Ä–æ–≤–æ–∂–¥–µ–Ω–∏—è.\n–¶–µ–Ω–∞: 120 000 —Ç–≥",
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("üì• –ó–∞–ø–∏—Å–∞—Ç—å—Å—è", callback_data="form")],
                [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="services")]
            ]), parse_mode="HTML"
        )
    elif data == "offline":
        await query.edit_message_text(
            "üè† <b>–í—ã–µ–∑–¥ –Ω–∞ –¥–æ–º</b> ‚Äî –æ—Å–º–æ—Ç—Ä, –æ–±—É—á–µ–Ω–∏–µ, –ø–æ–¥–¥–µ—Ä–∂–∫–∞ 7 –¥–Ω–µ–π.\n–¶–µ–Ω–∞: 170 000 —Ç–≥ (–®—ã–º–∫–µ–Ω—Ç) / 300 000 —Ç–≥ + –ø–µ—Ä–µ–ª—ë—Ç",
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("üì• –ó–∞–ø–∏—Å–∞—Ç—å—Å—è", callback_data="form")],
                [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="services")]
            ]), parse_mode="HTML"
        )
    elif data == "form":
        context.user_data["question"] = NAME
        return await ask_question(update, context)
    elif data == "contacts":
        await query.edit_message_text(
            "üì± –ö–æ–Ω—Ç–∞–∫—Ç—ã:\nWhatsApp: +7 771 147 10 34\nTelegram: @merey_neonatologist\n–ö–∞–Ω–∞–ª: https://t.me/+ohgaSD3VEQc5MGZi",
            reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üìã –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="menu")]])
        )
    elif data == "menu":
        profile = context.user_data.get("profile")
        await query.edit_message_text("üìã –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=main_menu(profile))

# --- –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ ---
async def unknown(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("‚ùó –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –º–µ–Ω—é. –Ø –∑–¥–µ—Å—å, —á—Ç–æ–±—ã –ø–æ–º–æ—á—å üå∏")

# --- –û—Å–Ω–æ–≤–Ω–æ–π –∑–∞–ø—É—Å–∫ ---
def main():
    app = ApplicationBuilder().token(BOT_TOKEN).build()

    form_conv = ConversationHandler(
        entry_points=[CallbackQueryHandler(button_handler, pattern="^form$")],
        states={q: [MessageHandler(filters.TEXT & ~filters.COMMAND, handle_answer)] for q in range(NAME, READY + 1)},
        fallbacks=[]
    )

    app.add_handler(CommandHandler("start", start))
    app.add_handler(CallbackQueryHandler(set_language, pattern="^lang_"))
    app.add_handler(CallbackQueryHandler(set_profile, pattern="^profile_"))
    app.add_handler(CallbackQueryHandler(button_handler))
    app.add_handler(form_conv)
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, unknown))

    logger.info("ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    app.run_polling()

if __name__ == "__main__":
    main()