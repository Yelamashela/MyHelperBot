import logging
from telegram import InlineKeyboardButton, InlineKeyboardMarkup, Update
from telegram.ext import (
    ApplicationBuilder, CommandHandler, CallbackQueryHandler,
    MessageHandler, filters, ContextTypes
)
from config import BOT_TOKEN
import gspread
from oauth2client.service_account import ServiceAccountCredentials

logging.basicConfig(level=logging.INFO)

# Google Sheets
try:
    scope = ["https://spreadsheets.google.com/feeds", "https://www.googleapis.com/auth/drive"]
    creds = ServiceAccountCredentials.from_json_keyfile_name("google-credentials.json", scope)
    client = gspread.authorize(creds)
    sheet = client.open("–ê–Ω–∫–µ—Ç—ã").sheet1
except Exception as e:
    logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏ –∫ Google Sheets: {e}")
    sheet = None

user_data = {}
language = {}

# –Ø–∑—ã–∫–∏
texts = {
    "ru": {
        "welcome": "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {name}!\n\n–Ø ‚Äî –±–æ—Ç –≤—Ä–∞—á–∞-–Ω–µ–æ–Ω–∞—Ç–æ–ª–æ–≥–∞. –ß–µ–º –º–æ–≥—É –ø–æ–º–æ—á—å?",
        "choose": "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        "services": "–í—ã–±–µ—Ä–∏—Ç–µ —É—Å–ª—É–≥—É:",
        "form": "üìù –ö–∞–∫ –≤–∞—Å –∑–æ–≤—É—Ç?",
        "contact": "üì± –ö–æ–Ω—Ç–∞–∫—Ç—ã:\n\nWhatsApp: +7 771 147 10 34\nTelegram: @merey_neonatologist\n–ö–∞–Ω–∞–ª: https://t.me/+ohgaSD3VEQc5MGZi"
    },
    "kz": {
        "welcome": "“ö–æ—à –∫–µ–ª–¥—ñ“£—ñ–∑, {name}!\n\n–ú–µ–Ω ‚Äî –∂–∞“£–∞ —Ç—É“ì–∞–Ω –Ω”ô—Ä–µ—Å—Ç–µ–ª–µ—Ä –¥”ô—Ä—ñ–≥–µ—Ä—ñ–º—ñ–Ω. “ö–∞–ª–∞–π –∫”©–º–µ–∫—Ç–µ—Å–µ –∞–ª–∞–º—ã–Ω?",
        "choose": "–¢–∞“£–¥–∞“£—ã–∑:",
        "services": "“ö—ã–∑–º–µ—Ç —Ç“Ø—Ä—ñ–Ω —Ç–∞“£–¥–∞“£—ã–∑:",
        "form": "üìù –ê—Ç—ã“£—ã–∑ –∫—ñ–º?",
        "contact": "üì± –ë–∞–π–ª–∞–Ω—ã—Å:\n\nWhatsApp: +7 771 147 10 34\nTelegram: @merey_neonatologist\n–ö–∞–Ω–∞–ª: https://t.me/+ohgaSD3VEQc5MGZi"
    }
}

# –°—Ç–∞—Ä—Ç —Å –≤—ã–±–æ—Ä–æ–º —è–∑—ã–∫–∞
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [
        [InlineKeyboardButton("üá∑üá∫ –†—É—Å—Å–∫–∏–π", callback_data="lang_ru"),
         InlineKeyboardButton("üá∞üáø “ö–∞–∑–∞“õ—à–∞", callback_data="lang_kz")]
    ]
    await update.message.reply_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫ / –¢—ñ–ª–¥—ñ —Ç–∞“£–¥–∞“£—ã–∑:",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫
async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    user_id = query.from_user.id

    # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —è–∑—ã–∫–∞
    if query.data.startswith("lang_"):
        lang = query.data.split("_")[1]
        language[user_id] = lang
        keyboard = [
            [InlineKeyboardButton("üìã –£—Å–ª—É–≥–∏ / “ö—ã–∑–º–µ—Ç—Ç–µ—Ä", callback_data="services")],
            [InlineKeyboardButton("üìù –ê–Ω–∫–µ—Ç–∞ / –°–∞—É–∞–ª–Ω–∞–º–∞", callback_data="form")],
            [InlineKeyboardButton("üì± –ö–æ–Ω—Ç–∞–∫—Ç—ã", callback_data="contacts")]
        ]
        await query.edit_message_text(
            texts[lang]["welcome"].format(name=query.from_user.first_name) + "\n\n" + texts[lang]["choose"],
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
        return

    lang = language.get(user_id, "ru")

    if query.data == "services":
        keyboard = [
            [InlineKeyboardButton("ü©∫ –û–Ω–ª–∞–π–Ω-–∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è", callback_data="service_online")],
            [InlineKeyboardButton("üè° –û—Ñ—Ñ–ª–∞–π–Ω —Å –≤—ã–µ–∑–¥–æ–º", callback_data="service_offline")],
            [InlineKeyboardButton("üë∂ –ö—É—Ä—Å 0‚Äì3 –º–µ—Å", callback_data="course_0_3")],
            [InlineKeyboardButton("üçº –ö—É—Ä—Å 3‚Äì6 –º–µ—Å", callback_data="course_3_6")],
            [InlineKeyboardButton("üå° Instagram-–∫–∞–Ω–∞–ª", callback_data="ig_channel")],
            [InlineKeyboardButton("ü§± –î–æ—É–ª–∞", callback_data="doula")],
            [InlineKeyboardButton("üåü –ù–∞—Å—Ç–∞–≤–Ω–∏—á–µ—Å—Ç–≤–æ", callback_data="mentorship")],
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="menu")]
        ]
        await query.edit_message_text(texts[lang]["services"], reply_markup=InlineKeyboardMarkup(keyboard))

    elif query.data == "contacts":
        keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="menu")]]
        await query.edit_message_text(texts[lang]["contact"], reply_markup=InlineKeyboardMarkup(keyboard))

    elif query.data == "form":
        user_data[user_id] = {}
        await query.edit_message_text(texts[lang]["form"])

    elif query.data == "menu":
        await start(update, context)

    # (–æ—Å—Ç–∞–≤—à–∏–µ—Å—è –∫–Ω–æ–ø–∫–∏ —É—Å–ª—É–≥ –∏ –æ–ø–∏—Å–∞–Ω–∏—è –æ—Å—Ç–∞–≤–∏–º –∫–∞–∫ –±—ã–ª–æ —Ä–∞–Ω–µ–µ ‚Äî –∫–æ–¥ –±—ã–ª –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
async def message_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    text = update.message.text
    lang = language.get(user_id, "ru")

    if user_id not in user_data:
        await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ /start —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å." if lang == "ru" else "–ë–∞—Å—Ç–∞—É “Ø—à—ñ–Ω /start –¥–µ–ø –∂–∞–∑—ã“£—ã–∑.")
        return

    data = user_data[user_id]
    prompts = [
        ("name", "üìç –ì–æ—Ä–æ–¥ / “õ–∞–ª–∞?"),
        ("city", "üìÖ –î–∞—Ç–∞ —Ä–æ–¥–æ–≤ / –¢—É“ì–∞–Ω –∫“Ø–Ω—ñ?"),
        ("birthdate", "‚ùì –ß—Ç–æ –±–µ—Å–ø–æ–∫–æ–∏—Ç / –ú”ô—Å–µ–ª–µ –Ω–µ–¥–µ?"),
        ("problem", "üîé –§–æ—Ä–º–∞—Ç (–æ–Ω–ª–∞–π–Ω / –æ—Ñ—Ñ–ª–∞–π–Ω / –≤—ã–µ–∑–¥)?"),
        ("format", "ü§î –ß—Ç–æ —É–∂–µ –ø—Ä–æ–±–æ–≤–∞–ª–∏ / –ù–µ —ñ—Å—Ç–µ–ø –∫”©—Ä–¥—ñ“£—ñ–∑?"),
        ("tried", "üí¨ –ì–æ—Ç–æ–≤—ã —Ä–∞–±–æ—Ç–∞—Ç—å –∏ –æ–ø–ª–∞—á–∏–≤–∞—Ç—å? (–¥–∞/–Ω–µ—Ç) / –î–∞–π—ã–Ω—Å—ã–∑ –±–∞?")
    ]

    for key, next_q in prompts:
        if key not in data:
            if key == "birthdate" and len(text) < 4:
                await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è.")
                return
            data[key] = text.strip()
            await update.message.reply_text(next_q)
            return

    if "ready" not in data:
        data["ready"] = text.strip()
        if sheet:
            try:
                sheet.append_row([
                    data.get("name", ""), data.get("city", ""), data.get("birthdate", ""),
                    data.get("problem", ""), data.get("format", ""), data.get("tried", ""), data.get("ready", "")
                ])
            except Exception as e:
                await update.message.reply_text("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
                logging.error(e)
        await update.message.reply_text("‚úÖ –°–ø–∞—Å–∏–±–æ! –í–∞—à–∞ –∞–Ω–∫–µ—Ç–∞ –ø—Ä–∏–Ω—è—Ç–∞. –ú—ã —Å–∫–æ—Ä–æ —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏." if lang == "ru" else "‚úÖ –†–∞—Ö–º–µ—Ç! –°–∞—É–∞–ª–Ω–∞–º–∞ “õ–∞–±—ã–ª–¥–∞–Ω–¥—ã. –ë—ñ–∑ —Å—ñ–∑–±–µ–Ω —Ö–∞–±–∞—Ä–ª–∞—Å–∞–º—ã–∑.")
        user_data.pop(user_id)

# –ê–≤—Ç–æ–æ—Ç–≤–µ—Ç ‚Äî –±–æ—Ç –Ω–µ –ø–æ–Ω—è–ª
async def fallback_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    lang = language.get(update.effective_user.id, "ru")
    text = "–Ø –≤–∞—Å –Ω–µ –ø–æ–Ω—è–ª. –ù–∞–ø–∏—à–∏—Ç–µ /start —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å." if lang == "ru" else "–°—ñ–∑–¥—ñ —Ç“Ø—Å—ñ–Ω–±–µ–¥—ñ–º. /start –¥–µ–ø –±–∞—Å—Ç–∞“£—ã–∑."
    await update.message.reply_text(text)

# –ó–∞–ø—É—Å–∫
app = ApplicationBuilder().token(BOT_TOKEN).build()
app.add_handler(CommandHandler("start", start))
app.add_handler(CallbackQueryHandler(button_handler))
app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, message_handler))
app.add_handler(MessageHandler(filters.ALL, fallback_handler))

if __name__ == '__main__':
    app.run_polling()