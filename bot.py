import os
import json
import logging
import datetime
import gspread
from google.oauth2.service_account import Credentials
from telegram import (
    Update, InlineKeyboardButton, InlineKeyboardMarkup,
    ReplyKeyboardMarkup, KeyboardButton
)
from telegram.ext import (
    ApplicationBuilder, CommandHandler, MessageHandler, filters,
    CallbackQueryHandler, ConversationHandler, ContextTypes
)

# --- –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ ---
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# --- –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è ---
BOT_TOKEN = os.getenv("BOT_TOKEN")
GOOGLE_CREDENTIALS = json.loads(os.getenv("GOOGLE_CREDENTIALS"))

# --- Google Sheets ---
try:
    scopes = [
        "https://www.googleapis.com/auth/spreadsheets",
        "https://www.googleapis.com/auth/drive"
    ]
    credentials = Credentials.from_service_account_info(GOOGLE_CREDENTIALS, scopes=scopes)
    client = gspread.authorize(credentials)
    sheet = client.open("MyHelperBot_–ê–Ω–∫–µ—Ç—ã").sheet1
except Exception as e:
    logger.error("‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Google Sheets:", e)
    sheet = None

# --- –°–æ—Å—Ç–æ—è–Ω–∏—è –∞–Ω–∫–µ—Ç—ã ---
LANG, PROFILE, NAME, LOCATION, DOB, CONCERN, FORMAT, TRIED, READY, FEEDBACK_SCORE, FEEDBACK_TEXT = range(11)
user_lang = {}
user_data_progress = {}

# --- –û—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é ---
def main_menu(lang):
    return ReplyKeyboardMarkup([
        ["üë© –ü—Ä–æ—Ñ–∏–ª—å", "üìö –ö—É—Ä—Å—ã –∏ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏"],
        ["üì• –ó–∞–ø–æ–ª–Ω–∏—Ç—å –∞–Ω–∫–µ—Ç—É", "üí¨ –ü–æ–¥–¥–µ—Ä–∂–∫–∞"],
        ["üìç –ö–æ–Ω—Ç–∞–∫—Ç—ã", "üìä –û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å"]
    ] if lang == "ru" else [
        ["üë© –ü—Ä–æ—Ñ–∏–ª—å", "üìö –ö—É—Ä—Å—Ç–∞—Ä –º–µ–Ω –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è–ª–∞—Ä"],
        ["üì• –°–∞—É–∞–ª–Ω–∞–º–∞ —Ç–æ–ª—Ç—ã—Ä—É", "üí¨ “ö–æ–ª–¥–∞—É"],
        ["üìç –ë–∞–π–ª–∞–Ω—ã—Å", "üìä –ö–µ—Ä—ñ –±–∞–π–ª–∞–Ω—ã—Å"]
    ], resize_keyboard=True)

# --- –°—Ç–∞—Ä—Ç / –Ø–∑—ã–∫ ---
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [["üá∑üá∫ –†—É—Å—Å–∫–∏–π", "üá∞üáø “ö–∞–∑–∞“õ—à–∞"]]
    await update.message.reply_text(
        "üë∂ <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ MyHelperBot!</b>\n\n"
        "‚ú® –Ø –ø–æ–º–æ–≥—É –≤–∞–º —Å –∑–∞–±–æ—Ç–æ–π, –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª–∏–∑–º–æ–º –∏ —Ç–µ–ø–ª–æ–º.\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫ / –¢—ñ–ª–¥—ñ —Ç–∞“£–¥–∞“£—ã–∑:",
        reply_markup=ReplyKeyboardMarkup(keyboard, resize_keyboard=True),
        parse_mode="HTML"
    )
    return LANG

async def set_language(update: Update, context: ContextTypes.DEFAULT_TYPE):
    lang = "ru" if "–†—É—Å" in update.message.text else "kz"
    user_lang[update.effective_user.id] = lang
    await update.message.reply_text(
        "üå∏ –î–∞–≤–∞–π—Ç–µ –Ω–∞—á–Ω—ë–º —Å –≤—ã–±–æ—Ä–∞, –∫—Ç–æ –≤—ã?" if lang == "ru" else "üå∏ –ê–ª–¥—ã–º–µ–Ω –∫—ñ–º –µ–∫–µ–Ω—ñ“£—ñ–∑–¥—ñ —Ç–∞“£–¥–∞“£—ã–∑:",
        reply_markup=ReplyKeyboardMarkup([
            ["ü§± –Ø –º–∞–º–∞", "ü§∞ –ë–µ—Ä–µ–º–µ–Ω–Ω–∞—è", "ü©∫ –°–ø–µ—Ü–∏–∞–ª–∏—Å—Ç"]
        ], resize_keyboard=True)
    )
    return PROFILE

# --- –ü—Ä–æ—Ñ–∏–ª—å –∏ –º–µ–Ω—é ---
async def set_profile(update: Update, context: ContextTypes.DEFAULT_TYPE):
    lang = user_lang.get(update.effective_user.id, "ru")
    profile = update.message.text
    context.user_data["profile"] = profile
    await update.message.reply_text(
        "‚úÖ –ü—Ä–æ—Ñ–∏–ª—å —Å–æ—Ö—Ä–∞–Ω—ë–Ω! –í–æ—Ç —á—Ç–æ —è —É–º–µ—é üëá" if lang == "ru" else "‚úÖ –ü—Ä–æ—Ñ–∏–ª—å —Å–∞“õ—Ç–∞–ª–¥—ã! –ú–µ–Ω —ñ—Å—Ç–µ–π –∞–ª–∞–º—ã–Ω üëá",
        reply_markup=main_menu(lang)
    )
    return ConversationHandler.END

# --- –ê–Ω–∫–µ—Ç–∞ —Å —à–∞–≥–∞–º–∏ –∏ –ø—Ä–æ–≥—Ä–µ—Å—Å–æ–º ---
questions = {
    NAME: ("üìù –ö–∞–∫ –≤–∞—Å –∑–æ–≤—É—Ç?", "üìù –ê—Ç—ã“£—ã–∑ –∫—ñ–º?"),
    LOCATION: ("üåç –í –∫–∞–∫–æ–º –≤—ã –≥–æ—Ä–æ–¥–µ/—Å—Ç—Ä–∞–Ω–µ?", "üåç “ö–∞–π “õ–∞–ª–∞/–µ–ª–¥–µ —Ç“±—Ä–∞—Å—ã–∑?"),
    DOB: ("üìÖ –î–∞—Ç–∞ —Ä–æ–¥–æ–≤?", "üìÖ –ë–æ—Å–∞–Ω—É –∫“Ø–Ω—ñ?"),
    CONCERN: ("ü§î –ß—Ç–æ –≤–∞—Å –±–µ—Å–ø–æ–∫–æ–∏—Ç?", "ü§î –ù–µ –º–∞–∑–∞—Å—ã–∑–¥–∞–Ω–∞—Å—ã–∑ –±–∞?"),
    FORMAT: ("üìå –ü—Ä–µ–¥–ø–æ—á—Ç–∏—Ç–µ–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç: –æ–Ω–ª–∞–π–Ω / –æ—Ñ—Ñ–ª–∞–π–Ω / –≤—ã–µ–∑–¥?", "üìå “ö–∞–Ω–¥–∞–π —Ñ–æ—Ä–º–∞—Ç —ã“£“ì–∞–π–ª—ã: –æ–Ω–ª–∞–π–Ω / –æ—Ñ—Ñ–ª–∞–π–Ω / —à—ã“ì—É?"),
    TRIED: ("üîÑ –ß—Ç–æ —É–∂–µ –ø—Ä–æ–±–æ–≤–∞–ª–∏?", "üîÑ –ù–µ —ñ—Å—Ç–µ–ø –∫”©—Ä–¥—ñ“£—ñ–∑?"),
    READY: ("üí¨ –ì–æ—Ç–æ–≤—ã –∫ —Ä–∞–±–æ—Ç–µ –∏ –æ–ø–ª–∞—Ç–µ?", "üí¨ –ñ“±–º—ã—Å —ñ—Å—Ç–µ—É–≥–µ –∂”ô–Ω–µ —Ç”©–ª–µ—É–≥–µ –¥–∞–π—ã–Ω—Å—ã–∑ –±–∞?")
}

async def ask_question(update: Update, context: ContextTypes.DEFAULT_TYPE):
    lang = user_lang.get(update.effective_user.id, "ru")
    q_index = context.user_data.get("question", NAME)
    total = len(questions)
    text = questions[q_index][0] if lang == "ru" else questions[q_index][1]
    await update.message.reply_text(f"{text}\n({q_index - NAME + 1} –∏–∑ {total})")
    context.user_data["question"] = q_index
    return q_index

async def handle_answer(update: Update, context: ContextTypes.DEFAULT_TYPE):
    q_index = context.user_data.get("question", NAME)
    context.user_data[q_index] = update.message.text
    q_index += 1
    if q_index > READY:
        if sheet:
            row = [context.user_data.get(q) for q in range(NAME, READY + 1)]
            sheet.append_row(row)
        lang = user_lang.get(update.effective_user.id, "ru")
        await update.message.reply_text(
            "‚úÖ –ê–Ω–∫–µ—Ç–∞ –ø–æ–ª—É—á–µ–Ω–∞! –ú—ã —Å –≤–∞–º–∏ —Å–≤—è–∂–µ–º—Å—è –≤ —Ç–µ—á–µ–Ω–∏–µ 24—á." if lang == "ru" else "‚úÖ –°–∞—É–∞–ª–Ω–∞–º–∞ “õ–∞–±—ã–ª–¥–∞–Ω–¥—ã! –ë—ñ–∑ —Å—ñ–∑–±–µ–Ω 24 —Å–∞“ì–∞—Ç —ñ—à—ñ–Ω–¥–µ —Ö–∞–±–∞—Ä–ª–∞—Å–∞–º—ã–∑.",
            reply_markup=main_menu(lang)
        )
        return ConversationHandler.END
    context.user_data["question"] = q_index
    return await ask_question(update, context)

# --- –ü–æ–¥–¥–µ—Ä–∂–∫–∞ (—á–∞—Ç —Å –∑–∞–±–æ—Ç–æ–π) ---
async def support(update: Update, context: ContextTypes.DEFAULT_TYPE):
    lang = user_lang.get(update.effective_user.id, "ru")
    now = datetime.datetime.now().hour
    if 22 <= now or now < 6:
        text = "–°–µ–π—á–∞—Å –ø–æ–∑–¥–Ω–æ, –Ω–æ —è —Å —Ç–æ–±–æ–π. –í–æ—Ç –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–æ–≤–µ—Ç–æ–≤ –æ—Ç –º–µ–Ω—è –Ω–∞ –Ω–æ—á—å üí´"
    else:
        text = "üí¨ –í—ã–±–µ—Ä–∏—Ç–µ –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ, —á—Ç–æ –≤–∞—Å –±–µ—Å–ø–æ–∫–æ–∏—Ç:\n\nüçº –£ —Ä–µ–±—ë–Ω–∫–∞ –∫–æ–ª–∏–∫–∏\nüò¥ –ü–ª–æ—Ö–æ —Å–ø–∏—Ç\n‚ùì –ß—Ç–æ —Å–ø—Ä–æ—Å–∏—Ç—å?" if lang == "ru" else "üí¨ –°“±—Ä–∞“ì—ã“£—ã–∑–¥—ã –∂–∞–∑—ã“£—ã–∑ –Ω–µ–º–µ—Å–µ —Ç–∞“£–¥–∞“£—ã–∑:\n\nüçº –ë–∞–ª–∞–¥–∞ —ñ—à “õ–∞—Ç—É\nüò¥ “∞–π“õ—ã—Å—ã –Ω–∞—à–∞—Ä\n‚ùì –ù–µ —Å“±—Ä–∞—É?"
    await update.message.reply_text(text, reply_markup=ReplyKeyboardMarkup([["üîô –ù–∞–∑–∞–¥"]], resize_keyboard=True))

# --- –û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å ---
async def feedback_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    lang = user_lang.get(update.effective_user.id, "ru")
    await update.message.reply_text("üìä –û—Ü–µ–Ω–∏—Ç–µ —Ä–∞–±–æ—Ç—É –±–æ—Ç–∞ –æ—Ç 1 –¥–æ 5:", reply_markup=ReplyKeyboardMarkup([["1", "2", "3", "4", "5"]], resize_keyboard=True))
    return FEEDBACK_SCORE

async def feedback_score(update: Update, context: ContextTypes.DEFAULT_TYPE):
    score = update.message.text.strip()
    context.user_data["score"] = score
    if score == "5":
        await update.message.reply_text("üíõ –°–ø–∞—Å–∏–±–æ –∑–∞ –≤—ã—Å–æ–∫—É—é –æ—Ü–µ–Ω–∫—É!")
        return ConversationHandler.END
    await update.message.reply_text("–ß—Ç–æ –±—ã –≤—ã —Ö–æ—Ç–µ–ª–∏ —É–ª—É—á—à–∏—Ç—å?")
    return FEEDBACK_TEXT

async def feedback_text(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text.strip()
    logger.info(f"–û—Ü–µ–Ω–∫–∞: {context.user_data.get('score')}, –û—Ç–∑—ã–≤: {text}")
    await update.message.reply_text("–ë–ª–∞–≥–æ–¥–∞—Ä–∏–º –∑–∞ –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å!")
    return ConversationHandler.END

# --- –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ ---
async def unknown(update: Update, context: ContextTypes.DEFAULT_TYPE):
    lang = user_lang.get(update.effective_user.id, "ru")
    text = "ü§ó –¢—ã –≤—Å—ë –¥–µ–ª–∞–µ—à—å –ø—Ä–∞–≤–∏–ª—å–Ω–æ. –Ø —Ä—è–¥–æ–º." if lang == "ru" else "ü§ó –°–µ–Ω –±”ô—Ä—ñ–Ω –¥“±—Ä—ã—Å —ñ—Å—Ç–µ–ø –∂–∞—Ç—ã—Ä—Å—ã“£. –ú–µ–Ω –æ—Å—ã–Ω–¥–∞–º—ã–Ω."
    await update.message.reply_text(text, reply_markup=main_menu(lang))

# --- –û—Å–Ω–æ–≤–Ω–æ–π –∑–∞–ø—É—Å–∫ ---
def main():
    app = ApplicationBuilder().token(BOT_TOKEN).build()

    form_conv = ConversationHandler(
        entry_points=[MessageHandler(filters.Regex("–ó–∞–ø–æ–ª–Ω–∏—Ç—å –∞–Ω–∫–µ—Ç—É|–°–∞—É–∞–ª–Ω–∞–º–∞ —Ç–æ–ª—Ç—ã—Ä—É"), ask_question)],
        states={q: [MessageHandler(filters.TEXT & ~filters.COMMAND, handle_answer)] for q in range(NAME, READY + 1)},
        fallbacks=[]
    )

    feedback_conv = ConversationHandler(
        entry_points=[MessageHandler(filters.Regex("–û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å|–ö–µ—Ä—ñ –±–∞–π–ª–∞–Ω—ã—Å"), feedback_start)],
        states={FEEDBACK_SCORE: [MessageHandler(filters.TEXT, feedback_score)], FEEDBACK_TEXT: [MessageHandler(filters.TEXT, feedback_text)]},
        fallbacks=[]
    )

    app.add_handler(CommandHandler("start", start))
    app.add_handler(MessageHandler(filters.Regex("–†—É—Å—Å–∫–∏–π|“ö–∞–∑–∞“õ—à–∞"), set_language))
    app.add_handler(MessageHandler(filters.Regex("ü§±|ü§∞|ü©∫"), set_profile))
    app.add_handler(MessageHandler(filters.Regex("–ö—É—Ä—Å—ã|–ö—É—Ä—Å—Ç–∞—Ä"), support))
    app.add_handler(MessageHandler(filters.Regex("–ö–æ–Ω—Ç–∞–∫—Ç—ã|–ë–∞–π–ª–∞–Ω—ã—Å"), support))
    app.add_handler(MessageHandler(filters.Regex("–ü–æ–¥–¥–µ—Ä–∂–∫–∞|“ö–æ–ª–¥–∞—É"), support))
    app.add_handler(MessageHandler(filters.Regex("–ù–∞–∑–∞–¥|“ö–∞–π—Ç—É"), start))
    app.add_handler(form_conv)
    app.add_handler(feedback_conv)
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, unknown))

    logger.info("ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    app.run_polling()

if __name__ == "__main__":
    main()