import os
import json
import logging
import datetime
import gspread
from google.oauth2.service_account import Credentials
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    ApplicationBuilder, CommandHandler, CallbackQueryHandler,
    MessageHandler, ConversationHandler, ContextTypes, filters
)

# --- –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ ---
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# --- –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è ---
BOT_TOKEN = os.getenv("BOT_TOKEN")
GOOGLE_CREDENTIALS = json.loads(os.getenv("GOOGLE_CREDENTIALS"))

# --- Google Sheets ---
try:
    scopes = [
        "https://www.googleapis.com/auth/spreadsheets",
        "https://www.googleapis.com/auth/drive"
    ]
    credentials = Credentials.from_service_account_info(GOOGLE_CREDENTIALS, scopes=scopes)
    client = gspread.authorize(credentials)
    sheet = client.open("MyHelperBot_–ê–Ω–∫–µ—Ç—ã").sheet1
except Exception as e:
    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Google Sheets: {e}")
    sheet = None

# --- –°–æ—Å—Ç–æ—è–Ω–∏—è ---
LANG, PROFILE, NAME, LOCATION, DOB, CONCERN, FORMAT, TRIED, READY = range(9)
user_lang = {}

# --- –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é ---
def get_main_menu(profile: str):
    btn = InlineKeyboardButton
    buttons = []

    if profile == "ü§± –Ø –º–∞–º–∞":
        buttons = [
            [btn("üìö –ö—É—Ä—Å—ã", "courses"), btn("ü©∫ –£—Å–ª—É–≥–∏", "services")],
            [btn("üë©‚Äç‚öï –û –≤—Ä–∞—á–µ", "about_doctor"), btn("üì• –ê–Ω–∫–µ—Ç–∞", "form")],
            [btn("üìç –ö–æ–Ω—Ç–∞–∫—Ç—ã", "contacts")]
        ]
    elif profile == "ü§∞ –ë–µ—Ä–µ–º–µ–Ω–Ω–∞—è":
        buttons = [
            [btn("ü§± –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ —Ä–æ–¥–∞–º", "doula"), btn("üìö –ö—É—Ä—Å—ã", "courses")],
            [btn("üë©‚Äç‚öï –û –≤—Ä–∞—á–µ", "about_doctor"), btn("üì• –ê–Ω–∫–µ—Ç–∞", "form")],
            [btn("üìç –ö–æ–Ω—Ç–∞–∫—Ç—ã", "contacts")]
        ]
    elif profile == "ü©∫ –°–ø–µ—Ü–∏–∞–ª–∏—Å—Ç":
        buttons = [
            [btn("üåü –ù–∞—Å—Ç–∞–≤–Ω–∏—á–µ—Å—Ç–≤–æ", "mentorship")],
            [btn("üìç –ö–æ–Ω—Ç–∞–∫—Ç—ã", "contacts")]
        ]
    return InlineKeyboardMarkup(buttons)

# --- –ö–æ–º–∞–Ω–¥–∞ /start ---
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [[
        InlineKeyboardButton("üá∑üá∫ –†—É—Å—Å–∫–∏–π", callback_data="lang_ru"),
        InlineKeyboardButton("üá∞üáø “ö–∞–∑–∞“õ—à–∞", callback_data="lang_kz")
    ]]
    await update.message.reply_text(
        "üë∂ <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ MyHelperBot!</b>\n\n"
        "‚ú® –Ø –ø–æ–º–æ–≥—É –≤–∞–º —Å –∑–∞–±–æ—Ç–æ–π, –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª–∏–∑–º–æ–º –∏ —Ç–µ–ø–ª–æ–º.\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫ / –¢—ñ–ª–¥—ñ —Ç–∞“£–¥–∞“£—ã–∑:",
        reply_markup=InlineKeyboardMarkup(keyboard),
        parse_mode="HTML"
    )

# --- –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —è–∑—ã–∫–∞ ---
async def set_language(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    lang = "ru" if query.data == "lang_ru" else "kz"
    user_lang[query.from_user.id] = lang
    keyboard = [[
        InlineKeyboardButton("ü§± –Ø –º–∞–º–∞", callback_data="profile_mama"),
        InlineKeyboardButton("ü§∞ –ë–µ—Ä–µ–º–µ–Ω–Ω–∞—è", callback_data="profile_pregnant"),
        InlineKeyboardButton("ü©∫ –°–ø–µ—Ü–∏–∞–ª–∏—Å—Ç", callback_data="profile_doctor")
    ]]
    await query.message.reply_text(
        "üå∏ –î–∞–≤–∞–π—Ç–µ –Ω–∞—á–Ω—ë–º. –ö—Ç–æ –≤—ã?" if lang == "ru" else "üå∏ –ê–ª–¥—ã–º–µ–Ω –∫—ñ–º—Å—ñ–∑?",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )

# --- –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø—Ä–æ—Ñ–∏–ª—è ---
async def set_profile(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    profile_map = {
        "profile_mama": "ü§± –Ø –º–∞–º–∞",
        "profile_pregnant": "ü§∞ –ë–µ—Ä–µ–º–µ–Ω–Ω–∞—è",
        "profile_doctor": "ü©∫ –°–ø–µ—Ü–∏–∞–ª–∏—Å—Ç"
    }
    profile = profile_map[query.data]
    context.user_data["profile"] = profile
    lang = user_lang.get(query.from_user.id, "ru")
    await query.message.reply_text(
        "‚úÖ –ü—Ä–æ—Ñ–∏–ª—å —Å–æ—Ö—Ä–∞–Ω—ë–Ω! –í–æ—Ç –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:",
        reply_markup=get_main_menu(profile)
    )
    # –ê–≤—Ç–æ–ø–æ–∫–∞–∑ –±–ª–æ–∫–∞ "–û –≤—Ä–∞—á–µ"
    if profile in ["ü§± –Ø –º–∞–º–∞", "ü§∞ –ë–µ—Ä–µ–º–µ–Ω–Ω–∞—è"]:
        await query.message.reply_text(
            "<b>üë©‚Äç‚öï –ñ—É–º–∞–Ω–æ–≤–∞ –ú–µ—Ä–µ–π –ù–∞—Å—ñ—Ä—Ö–∞–Ω“õ—ã–∑—ã</b>\n\n"
            "–í—Ä–∞—á-–Ω–µ–æ–Ω–∞—Ç–æ–ª–æ–≥ —Å –æ–ø—ã—Ç–æ–º –±–æ–ª–µ–µ 13 –ª–µ—Ç.\n"
            "üîπ –°–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è: —Ä–µ–∞–Ω–∏–º–∞—Ü–∏—è, —Ö–∏—Ä—É—Ä–≥–∏—è, —Ä–æ–¥—ã, –≤—ã—Ö–∞–∂–∏–≤–∞–Ω–∏–µ –Ω–µ–¥–æ–Ω–æ—à–µ–Ω–Ω—ã—Ö.\n"
            "üë∂ –ë–æ–ª–µ–µ 18 000 –º–∞–ª—ã—à–µ–π –ø—Ä–æ—à–ª–∏ —á–µ—Ä–µ–∑ –µ—ë —Ä—É–∫–∏.\n\n"
            "<i>¬´–í—ã –Ω–µ –æ–¥–Ω–∞. –Ø —Ä—è–¥–æ–º, —á—Ç–æ–±—ã –ø–æ–º–æ—á—å –≤–∞–º –ø–æ–Ω—è—Ç—å –º–∞–ª—ã—à–∞ ‚Äî —Å –ø–µ—Ä–≤—ã—Ö –º–∏–Ω—É—Ç –∂–∏–∑–Ω–∏ –∏ –¥–∞–ª—å—à–µ.¬ª</i>\n\n"
            "üì© –•–æ—Ç–∏—Ç–µ –ø–æ–ª—É—á–∏—Ç—å –ø–æ–º–æ—â—å? –ù–∞—á–Ω—ë–º —Å –∫–æ—Ä–æ—Ç–∫–æ–π –∞–Ω–∫–µ—Ç—ã:",
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("üì• –ó–∞–ø–æ–ª–Ω–∏—Ç—å –∞–Ω–∫–µ—Ç—É", callback_data="form")],
                [InlineKeyboardButton("üìã –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="menu")]
            ]),
            parse_mode="HTML"
        )

# --- –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫ ---
async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    data = query.data
    profile = context.user_data.get("profile", "ü§± –Ø –º–∞–º–∞")

    if data == "about_doctor":
        await query.message.reply_text(
            "<b>üë©‚Äç‚öï –ñ—É–º–∞–Ω–æ–≤–∞ –ú–µ—Ä–µ–π –ù–∞—Å—ñ—Ä—Ö–∞–Ω“õ—ã–∑—ã</b>\n\n"
            "–í—Ä–∞—á-–Ω–µ–æ–Ω–∞—Ç–æ–ª–æ–≥ —Å –æ–ø—ã—Ç–æ–º –±–æ–ª–µ–µ 13 –ª–µ—Ç.\n"
            "üîπ –†–µ–∞–Ω–∏–º–∞—Ü–∏—è –Ω–æ–≤–æ—Ä–æ–∂–¥—ë–Ω–Ω—ã—Ö, —Ö–∏—Ä—É—Ä–≥–∏—è, –ø–∞—Ç–æ–ª–æ–≥–∏—è, —Ä–æ–¥—ã.\n"
            "üë∂ –ë–æ–ª–µ–µ 18 000 –º–∞–ª—ã—à–µ–π –ø—Ä–æ—à–ª–∏ —á–µ—Ä–µ–∑ –µ—ë —Ä—É–∫–∏.\n\n"
            "<i>¬´–í—ã –Ω–µ –æ–¥–Ω–∞. –Ø —Ä—è–¥–æ–º, —á—Ç–æ–±—ã –ø–æ–º–æ—á—å –≤–∞–º –ø–æ–Ω—è—Ç—å –º–∞–ª—ã—à–∞ ‚Äî —Å –ø–µ—Ä–≤—ã—Ö –º–∏–Ω—É—Ç –∂–∏–∑–Ω–∏ –∏ –¥–∞–ª—å—à–µ.¬ª</i>\n\n"
            "üì© –•–æ—Ç–∏—Ç–µ –ø–æ–ª—É—á–∏—Ç—å –ø–æ–º–æ—â—å? –ù–∞—á–Ω—ë–º —Å –∞–Ω–∫–µ—Ç—ã:",
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("üì• –ê–Ω–∫–µ—Ç–∞", callback_data="form")],
                [InlineKeyboardButton("üìã –ù–∞–∑–∞–¥", callback_data="menu")]
            ]),
            parse_mode="HTML"
        )

    elif data == "menu":
        await query.message.reply_text("üìã –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=get_main_menu(profile))

    elif data == "form":
        context.user_data["question"] = NAME
        await query.message.reply_text("üìù –î–∞–≤–∞–π—Ç–µ –Ω–∞—á–Ω—ë–º –∞–Ω–∫–µ—Ç—É!")
        return await ask_question(update, context)

    elif data == "courses":
        await query.message.reply_text(
            "üìö –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫—É—Ä—Å—ã:\n\n"
            "1. üë∂ 0‚Äì3 –º–µ—Å: –ø–∏—Ç–∞–Ω–∏–µ, –∫–æ–ª–∏–∫–∏, –∂–µ–ª—Ç—É—Ö–∞, –∫–æ–∂–∞\n"
            "2. üë∂ 3‚Äì6 –º–µ—Å: –º–æ—Ç–æ—Ä–∏–∫–∞, –º–∞—Å—Å–∞–∂, —Ä–∞–∑–≤–∏—Ç–∏–µ\n"
            "3. üå° –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –∏ –∏–º–º—É–Ω–∏—Ç–µ—Ç\n\n"
            "–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π –∫—É—Ä—Å –¥–ª—è –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–µ–π.",
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("0‚Äì3 –º–µ—Å", callback_data="course_0_3")],
                [InlineKeyboardButton("3‚Äì6 –º–µ—Å", callback_data="course_3_6")],
                [InlineKeyboardButton("–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –∏ –∏–º–º—É–Ω–∏—Ç–µ—Ç", callback_data="course_temp")],
                [InlineKeyboardButton("üìã –ù–∞–∑–∞–¥", callback_data="menu")]
            ])
        )

    # –î–æ–ø–∏—à–∏ –æ–±—Ä–∞–±–æ—Ç–∫—É –¥—Ä—É–≥–∏—Ö –∫—É—Ä—Å–æ–≤, —É—Å–ª—É–≥, –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–π –∏ —Ç.–¥.

# --- –ê–Ω–∫–µ—Ç–∞ ---
questions = {
    NAME: "üìù –ö–∞–∫ –≤–∞—Å –∑–æ–≤—É—Ç?",
    LOCATION: "üåç –í –∫–∞–∫–æ–º –≤—ã –≥–æ—Ä–æ–¥–µ/—Å—Ç—Ä–∞–Ω–µ?",
    DOB: "üìÖ –î–∞—Ç–∞ —Ä–æ–¥–æ–≤?",
    CONCERN: "ü§î –ß—Ç–æ –≤–∞—Å –±–µ—Å–ø–æ–∫–æ–∏—Ç?",
    FORMAT: "üìå –û–Ω–ª–∞–π–Ω / –æ—Ñ—Ñ–ª–∞–π–Ω / –≤—ã–µ–∑–¥?",
    TRIED: "üîÑ –ß—Ç–æ —É–∂–µ –ø—Ä–æ–±–æ–≤–∞–ª–∏?",
    READY: "üí¨ –ì–æ—Ç–æ–≤—ã –∫ —Ä–∞–±–æ—Ç–µ –∏ –æ–ø–ª–∞—Ç–µ?"
}

async def ask_question(update: Update, context: ContextTypes.DEFAULT_TYPE):
    step = context.user_data["question"]
    total = READY - NAME + 1
    progress = step - NAME + 1
    await update.message.reply_text(f"{questions[step]}\n\n–®–∞–≥ {progress} –∏–∑ {total}")
    return step

async def handle_answer(update: Update, context: ContextTypes.DEFAULT_TYPE):
    step = context.user_data["question"]
    answer = update.message.text.strip()
    if not answer:
        await update.message.reply_text("‚ùó –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç.")
        return step
    context.user_data[step] = answer
    next_step = step + 1
    if next_step > READY:
        if sheet:
            row = [context.user_data.get(i, "") for i in range(NAME, READY + 1)]
            sheet.append_row(row)
        await update.message.reply_text("‚úÖ –ê–Ω–∫–µ—Ç–∞ –ø–æ–ª—É—á–µ–Ω–∞! –ú—ã —Å –≤–∞–º–∏ —Å–≤—è–∂–µ–º—Å—è –≤ —Ç–µ—á–µ–Ω–∏–µ 24—á.")
        profile = context.user_data.get("profile", "ü§± –Ø –º–∞–º–∞")
        await update.message.reply_text("üìã –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=get_main_menu(profile))
        return ConversationHandler.END
    context.user_data["question"] = next_step
    return await ask_question(update, context)

# --- –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ ---
async def unknown(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("‚Ñπ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é.")

# --- –û—Å–Ω–æ–≤–Ω–æ–π –∑–∞–ø—É—Å–∫ ---
def main():
    app = ApplicationBuilder().token(BOT_TOKEN).build()

    form_conv = ConversationHandler(
        entry_points=[CallbackQueryHandler(button_handler, pattern="^form$")],
        states={q: [MessageHandler(filters.TEXT & ~filters.COMMAND, handle_answer)] for q in range(NAME, READY + 1)},
        fallbacks=[]
    )

    app.add_handler(CommandHandler("start", start))
    app.add_handler(CallbackQueryHandler(set_language, pattern="^lang_"))
    app.add_handler(CallbackQueryHandler(set_profile, pattern="^profile_"))
    app.add_handler(CallbackQueryHandler(button_handler))
    app.add_handler(form_conv)
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, unknown))

    logger.info("ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    app.run_polling()

if __name__ == "__main__":
    main()