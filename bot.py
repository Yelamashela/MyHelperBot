# bot.py
import os
import json
import logging
import gspread
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    ApplicationBuilder, CommandHandler, CallbackQueryHandler,
    MessageHandler, ConversationHandler, ContextTypes, filters
)
from google.oauth2.service_account import Credentials

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
BOT_TOKEN = os.getenv("BOT_TOKEN")
GOOGLE_CREDENTIALS = json.loads(os.getenv("GOOGLE_CREDENTIALS"))

# Google Sheets
try:
    scopes = ["https://www.googleapis.com/auth/spreadsheets"]
    credentials = Credentials.from_service_account_info(GOOGLE_CREDENTIALS, scopes=scopes)
    client = gspread.authorize(credentials)
    sheet = client.open("MyHelperBot_–ê–Ω–∫–µ—Ç—ã").sheet1
except Exception as e:
    logger.error(f"–û—à–∏–±–∫–∞ Google Sheets: {e}")
    sheet = None

# –°–æ—Å—Ç–æ—è–Ω–∏—è –∞–Ω–∫–µ—Ç—ã
LANG, PROFILE, NAME, LOCATION, DOB, CONCERN, FORMAT, TRIED, READY = range(9)
user_lang = {}

# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
def get_main_menu(profile: str):
    btn = InlineKeyboardButton
    if profile == "ü§± –Ø –º–∞–º–∞":
        return InlineKeyboardMarkup([
            [btn("üìö –ö—É—Ä—Å—ã", callback_data="courses")],
            [btn("ü©∫ –£—Å–ª—É–≥–∏", callback_data="services")],
            [btn("üë©‚Äç‚öï –û –≤—Ä–∞—á–µ", callback_data="about_doctor")],
            [btn("üì• –ê–Ω–∫–µ—Ç–∞", callback_data="form")],
            [btn("üìç –ö–æ–Ω—Ç–∞–∫—Ç—ã", callback_data="contacts")]
        ])
    elif profile == "ü§∞ –ë–µ—Ä–µ–º–µ–Ω–Ω–∞—è":
        return InlineKeyboardMarkup([
            [btn("üìö –ö—É—Ä—Å—ã", callback_data="courses")],
            [btn("ü§± –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ —Ä–æ–¥–∞–º", callback_data="doula")],
            [btn("üë©‚Äç‚öï –û –≤—Ä–∞—á–µ", callback_data="about_doctor")],
            [btn("üì• –ê–Ω–∫–µ—Ç–∞", callback_data="form")],
            [btn("üìç –ö–æ–Ω—Ç–∞–∫—Ç—ã", callback_data="contacts")]
        ])
    elif profile == "ü©∫ –°–ø–µ—Ü–∏–∞–ª–∏—Å—Ç":
        return InlineKeyboardMarkup([
            [btn("üåü –ù–∞—Å—Ç–∞–≤–Ω–∏—á–µ—Å—Ç–≤–æ", callback_data="mentorship")],
            [btn("üìç –ö–æ–Ω—Ç–∞–∫—Ç—ã", callback_data="contacts")]
        ])
    return InlineKeyboardMarkup([[btn("üì• –ê–Ω–∫–µ—Ç–∞", callback_data="form")]])

# –ö–æ–º–∞–Ω–¥–∞ /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [
        [InlineKeyboardButton("üá∑üá∫ –†—É—Å—Å–∫–∏–π", callback_data="lang_ru"),
         InlineKeyboardButton("üá∞üáø “ö–∞–∑–∞“õ—à–∞", callback_data="lang_kz")]
    ]
    await update.message.reply_text(
        "üë∂ <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ MyHelperBot!</b>\n\n"
        "‚ú® –Ø –ø–æ–º–æ–≥—É –≤–∞–º —Å –∑–∞–±–æ—Ç–æ–π, –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª–∏–∑–º–æ–º –∏ —Ç–µ–ø–ª–æ–º.\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫ / –¢—ñ–ª–¥—ñ —Ç–∞“£–¥–∞“£—ã–∑:",
        reply_markup=InlineKeyboardMarkup(keyboard),
        parse_mode="HTML"
    )

# –Ø–∑—ã–∫
async def set_language(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    lang = "ru" if query.data == "lang_ru" else "kz"
    user_lang[query.from_user.id] = lang
    keyboard = [
        [InlineKeyboardButton("ü§± –Ø –º–∞–º–∞", callback_data="profile_mama")],
        [InlineKeyboardButton("ü§∞ –ë–µ—Ä–µ–º–µ–Ω–Ω–∞—è", callback_data="profile_pregnant")],
        [InlineKeyboardButton("ü©∫ –°–ø–µ—Ü–∏–∞–ª–∏—Å—Ç", callback_data="profile_doctor")]
    ]
    await query.message.reply_text(
        "üå∏ –ö—Ç–æ –≤—ã?" if lang == "ru" else "üå∏ –ö—ñ–º—Å—ñ–∑?",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )

# –ü—Ä–æ—Ñ–∏–ª—å
async def set_profile(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    profile_map = {
        "profile_mama": "ü§± –Ø –º–∞–º–∞",
        "profile_pregnant": "ü§∞ –ë–µ—Ä–µ–º–µ–Ω–Ω–∞—è",
        "profile_doctor": "ü©∫ –°–ø–µ—Ü–∏–∞–ª–∏—Å—Ç"
    }
    profile = profile_map[query.data]
    context.user_data["profile"] = profile
    await query.message.reply_text("‚úÖ –ü—Ä–æ—Ñ–∏–ª—å —Å–æ—Ö—Ä–∞–Ω—ë–Ω. –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:",
                                   reply_markup=get_main_menu(profile))
    if profile in ["ü§± –Ø –º–∞–º–∞", "ü§∞ –ë–µ—Ä–µ–º–µ–Ω–Ω–∞—è"]:
        await query.message.reply_text(
            "<b>üë©‚Äç‚öï –ñ—É–º–∞–Ω–æ–≤–∞ –ú–µ—Ä–µ–π –ù–∞—Å—ñ—Ä—Ö–∞–Ω“õ—ã–∑—ã</b>\n\n"
            "–í—Ä–∞—á-–Ω–µ–æ–Ω–∞—Ç–æ–ª–æ–≥ —Å –æ–ø—ã—Ç–æ–º –±–æ–ª–µ–µ 13 –ª–µ—Ç.\n"
            "üîπ –†–µ–∞–Ω–∏–º–∞—Ü–∏—è, —Ö–∏—Ä—É—Ä–≥–∏—è, —Ä–æ–¥—ã, –Ω–µ–¥–æ–Ω–æ—à–µ–Ω–Ω—ã–µ –¥–µ—Ç–∏.\n"
            "üë∂ –ë–æ–ª–µ–µ 18 000 –º–∞–ª—ã—à–µ–π –ø—Ä–æ—à–ª–∏ —á–µ—Ä–µ–∑ –µ—ë —Ä—É–∫–∏.\n\n"
            "<i>¬´–í—ã –Ω–µ –æ–¥–Ω–∞. –Ø —Ä—è–¥–æ–º, —á—Ç–æ–±—ã –ø–æ–º–æ—á—å –≤–∞–º –ø–æ–Ω—è—Ç—å –º–∞–ª—ã—à–∞ ‚Äî —Å –ø–µ—Ä–≤—ã—Ö –º–∏–Ω—É—Ç –∂–∏–∑–Ω–∏ –∏ –¥–∞–ª—å—à–µ.¬ª</i>\n\n"
            "üì© –ó–∞–ø–æ–ª–Ω–∏—Ç–µ –∞–Ω–∫–µ—Ç—É ‚Äî –∏ —è –ø–æ–¥–±–µ—Ä—É –¥–ª—è –≤–∞—Å —Ñ–æ—Ä–º–∞—Ç –ø–æ–º–æ—â–∏.",
            parse_mode="HTML",
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("üì• –ê–Ω–∫–µ—Ç–∞", callback_data="form")],
                [InlineKeyboardButton("üìã –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="menu")]
            ])
        )

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫
async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    data = query.data
    profile = context.user_data.get("profile", "ü§± –Ø –º–∞–º–∞")

    if data == "menu":
        await query.message.reply_text("üìã –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=get_main_menu(profile))

    elif data == "about_doctor":
        await query.message.reply_text(
            "<b>üë©‚Äç‚öï –ñ—É–º–∞–Ω–æ–≤–∞ –ú–µ—Ä–µ–π –ù–∞—Å—ñ—Ä—Ö–∞–Ω“õ—ã–∑—ã</b>\n\n"
            "–í—Ä–∞—á-–Ω–µ–æ–Ω–∞—Ç–æ–ª–æ–≥ —Å –æ–ø—ã—Ç–æ–º 13+ –ª–µ—Ç.\n"
            "–†–µ–∞–Ω–∏–º–∞—Ü–∏—è, —Ö–∏—Ä—É—Ä–≥–∏—è, –ì–í, –∞–¥–∞–ø—Ç–∞—Ü–∏—è, –ø–∞—Ç–æ–ª–æ–≥–∏—è.\n"
            "üë∂ 18 000 –º–∞–ª—ã—à–µ–π. 100% –≤–∫–ª—é—á—ë–Ω–Ω–æ—Å—Ç—å.\n\n"
            "<i>¬´–í—ã –Ω–µ –æ–¥–Ω–∞. –Ø —Ä—è–¥–æ–º, —á—Ç–æ–±—ã –ø–æ–º–æ—á—å –≤–∞–º –ø–æ–Ω—è—Ç—å –º–∞–ª—ã—à–∞ ‚Äî —Å –ø–µ—Ä–≤—ã—Ö –º–∏–Ω—É—Ç –∂–∏–∑–Ω–∏ –∏ –¥–∞–ª—å—à–µ.¬ª</i>",
            parse_mode="HTML",
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("üì• –ê–Ω–∫–µ—Ç–∞", callback_data="form")],
                [InlineKeyboardButton("üìã –ù–∞–∑–∞–¥", callback_data="menu")]
            ])
        )

    elif data == "contacts":
        await query.message.reply_text(
            "üì± –ö–æ–Ω—Ç–∞–∫—Ç—ã:\n\n"
            "WhatsApp: +7 771 147 10 34\n"
            "Telegram: @merey_neonatologist\n"
            "–ö–∞–Ω–∞–ª: https://t.me/+ohgaSD3VEQc5MGZi",
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("üìã –ù–∞–∑–∞–¥", callback_data="menu")]
            ])
        )

    elif data == "form":
        context.user_data["question"] = NAME
        await query.message.reply_text("üìù –î–∞–≤–∞–π—Ç–µ –Ω–∞—á–Ω—ë–º –∞–Ω–∫–µ—Ç—É!")
        return await ask_question(update, context)

    elif data == "courses":
        await query.message.reply_text(
            "üìö –ö—É—Ä—Å—ã:\n\n"
            "üë∂ 0‚Äì3 –º–µ—Å ‚Äî –≥—Ä—É–¥–Ω–æ–µ –≤—Å–∫–∞—Ä–º–ª–∏–≤–∞–Ω–∏–µ, –∫–æ–ª–∏–∫–∏, –∂–µ–ª—Ç—É—Ö–∞\n"
            "üë∂ 3‚Äì6 –º–µ—Å ‚Äî —Ä–∞–∑–≤–∏—Ç–∏–µ, –º–∞—Å—Å–∞–∂, –ø–µ—Ä–µ–≤–æ—Ä–æ—Ç—ã\n"
            "üå° –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –∏ –∏–º–º—É–Ω–∏—Ç–µ—Ç ‚Äî –±–µ–∑ –ª–µ–∫–∞—Ä—Å—Ç–≤\n\n"
            "üì© –í—Å–µ –∫—É—Ä—Å—ã —Å–æ–¥–µ—Ä–∂–∞—Ç –≤–∏–¥–µ–æ—É—Ä–æ–∫–∏, –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –∏ –ø–æ–¥–¥–µ—Ä–∂–∫—É.",
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("üìã –ù–∞–∑–∞–¥", callback_data="menu")]
            ])
        )

    elif data == "services":
        await query.message.reply_text(
            "ü©∫ –ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏:\n\n"
            "üìû –û–Ω–ª–∞–π–Ω: 2—á –≤–∏–¥–µ–æ–∑–≤–æ–Ω–æ–∫ + 7 –¥–Ω–µ–π –ø–æ–¥–¥–µ—Ä–∂–∫–∏\n"
            "üè° –û—Ñ—Ñ–ª–∞–π–Ω: –≤—ã–µ–∑–¥ –Ω–∞ –¥–æ–º + 7 –¥–Ω–µ–π —Å–æ–ø—Ä–æ–≤–æ–∂–¥–µ–Ω–∏—è\n\n"
            "‚ö† –ü–æ–¥—Ö–æ–¥–∏—Ç –º–∞–º–∞–º —Å —Ç—Ä—É–¥–Ω–æ—Å—Ç—è–º–∏ –ì–í, –ñ–ö–¢, —Å—Ä—ã–≥–∏–≤–∞–Ω–∏—è–º–∏, –∫–æ–ª–∏–∫–∞–º–∏.\n"
            "üì© –ù–∞—á–Ω–∏—Ç–µ —Å –∞–Ω–∫–µ—Ç—ã, —á—Ç–æ–±—ã –ø–æ–¥–æ–±—Ä–∞—Ç—å —Ñ–æ—Ä–º–∞—Ç.",
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("üì• –ê–Ω–∫–µ—Ç–∞", callback_data="form")],
                [InlineKeyboardButton("üìã –ù–∞–∑–∞–¥", callback_data="menu")]
            ])
        )

    elif data == "mentorship":
        await query.message.reply_text(
            "üåü –ù–∞—Å—Ç–∞–≤–Ω–∏—á–µ—Å—Ç–≤–æ:\n\n"
            "üîπ –î–ª—è –≤—Ä–∞—á–µ–π, –º–µ–¥—Å–µ—Å—Ç—ë—Ä –∏ –∞–∫—É—à–µ—Ä–æ–∫\n"
            "üîπ 10 —É—Ä–æ–∫–æ–≤, 1 –º–µ—Å—è—Ü, –ø–æ–¥–¥–µ—Ä–∂–∫–∞, —Ä–∞–∑–±–æ—Ä –∫–µ–π—Å–æ–≤\n"
            "üîπ –¢–µ–º—ã: –≥—Ä—É–¥–Ω–æ–µ –≤—Å–∫–∞—Ä–º–ª–∏–≤–∞–Ω–∏–µ, –î–æ—É–ª–∞, –∂–µ–ª—Ç—É—Ö–∞, —É—Ö–æ–¥ –∑–∞ –ù–†\n\n"
            "üì© –•–æ—á–µ—à—å –∑–∞—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –∏ –Ω–µ –≤—ã–≥–æ—Ä–∞—Ç—å? –ù–∞—á–Ω–∏ —Å –∞–Ω–∫–µ—Ç—ã!",
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("üì• –ê–Ω–∫–µ—Ç–∞", callback_data="form")],
                [InlineKeyboardButton("üìã –ù–∞–∑–∞–¥", callback_data="menu")]
            ])
        )

# –ê–Ω–∫–µ—Ç–∞
questions = {
    NAME: "üìù –í–∞—à–µ –∏–º—è?",
    LOCATION: "üåç –ì–æ—Ä–æ–¥ / —Å—Ç—Ä–∞–Ω–∞?",
    DOB: "üìÖ –î–∞—Ç–∞ —Ä–æ–¥–æ–≤?",
    CONCERN: "ü§î –ß—Ç–æ –≤–∞—Å –±–µ—Å–ø–æ–∫–æ–∏—Ç?",
    FORMAT: "üìå –û–Ω–ª–∞–π–Ω / –æ—Ñ—Ñ–ª–∞–π–Ω / –≤—ã–µ–∑–¥?",
    TRIED: "üîÑ –ß—Ç–æ —É–∂–µ –ø—Ä–æ–±–æ–≤–∞–ª–∏?",
    READY: "üí¨ –ì–æ—Ç–æ–≤—ã –∫ —Ä–∞–±–æ—Ç–µ –∏ –æ–ø–ª–∞—Ç–µ?"
}

async def ask_question(update: Update, context: ContextTypes.DEFAULT_TYPE):
    step = context.user_data["question"]
    total = READY - NAME + 1
    progress = step - NAME + 1
    await update.message.reply_text(f"{questions[step]}\n\nüìä –®–∞–≥ {progress} –∏–∑ {total}")
    return step

async def handle_answer(update: Update, context: ContextTypes.DEFAULT_TYPE):
    step = context.user_data["question"]
    answer = update.message.text.strip()
    if not answer:
        await update.message.reply_text("‚ùó –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç.")
        return step
    context.user_data[step] = answer
    step += 1
    if step > READY:
        if sheet:
            sheet.append_row([context.user_data.get(i, "") for i in range(NAME, READY + 1)])
        await update.message.reply_text("‚úÖ –°–ø–∞—Å–∏–±–æ! –ê–Ω–∫–µ—Ç–∞ –ø–æ–ª—É—á–µ–Ω–∞. –ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –≤ —Ç–µ—á–µ–Ω–∏–µ 24 —á–∞—Å–æ–≤.")
        profile = context.user_data.get("profile", "ü§± –Ø –º–∞–º–∞")
        await update.message.reply_text("üìã –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=get_main_menu(profile))
        return ConversationHandler.END
    context.user_data["question"] = step
    return await ask_question(update, context)

# –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
async def unknown(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("‚Ñπ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–µ–Ω—é –Ω–∏–∂–µ.")

# –û—Å–Ω–æ–≤–Ω–æ–π –∑–∞–ø—É—Å–∫
def main():
    app = ApplicationBuilder().token(BOT_TOKEN).build()

    form_conv = ConversationHandler(
        entry_points=[CallbackQueryHandler(button_handler, pattern="^form$")],
        states={q: [MessageHandler(filters.TEXT & ~filters.COMMAND, handle_answer)] for q in range(NAME, READY + 1)},
        fallbacks=[]
    )

    app.add_handler(CommandHandler("start", start))
    app.add_handler(CallbackQueryHandler(set_language, pattern="^lang_"))
    app.add_handler(CallbackQueryHandler(set_profile, pattern="^profile_"))
    app.add_handler(CallbackQueryHandler(button_handler))
    app.add_handler(form_conv)
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, unknown))

    logger.info("ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω")
    app.run_polling()

if __name__ == "__main__":
    main()