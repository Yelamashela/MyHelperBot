import os
import json
import logging
import gspread
from oauth2client.service_account import ServiceAccountCredentials
from telegram import (
    Update, InlineKeyboardMarkup, InlineKeyboardButton,
    ReplyKeyboardMarkup, KeyboardButton
)
from telegram.ext import (
    ApplicationBuilder, CommandHandler, MessageHandler,
    CallbackQueryHandler, ConversationHandler, ContextTypes, filters
)

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
BOT_TOKEN = os.getenv("BOT_TOKEN")
GOOGLE_CREDENTIALS = json.loads(os.getenv("GOOGLE_CREDENTIALS"))

# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Google Sheets
try:
    scope = ["https://spreadsheets.google.com/feeds", "https://www.googleapis.com/auth/drive"]
    creds = ServiceAccountCredentials.from_json_keyfile_dict(GOOGLE_CREDENTIALS, scope)
    client = gspread.authorize(creds)
    sheet = client.open("MyHelperBot_–ê–Ω–∫–µ—Ç—ã").sheet1
except Exception as e:
    logger.error("‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Google Sheets.")
    logger.error("üîç –ü—Ä–æ–≤–µ—Ä—å –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é GOOGLE_CREDENTIALS –∏ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω –ª–∏ Google Drive API.")
    logger.error(f"üõ†Ô∏è –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
    sheet = None

# –°–æ—Å—Ç–æ—è–Ω–∏—è
LANGUAGE, NAME, PHONE = range(3)
user_lang = {}

# –ö–Ω–æ–ø–∫–∏
main_buttons_ru = [["üìö –ö—É—Ä—Å—ã –∏ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏"], ["üìç –ö–æ–Ω—Ç–∞–∫—Ç—ã", "üìù –ó–∞–ø–æ–ª–Ω–∏—Ç—å –∞–Ω–∫–µ—Ç—É"]]
main_buttons_kz = [["üìö –ö—É—Ä—Å—Ç–∞—Ä –º–µ–Ω –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è–ª–∞—Ä"], ["üìç –ë–∞–π–ª–∞–Ω—ã—Å", "üìù –°–∞—É–∞–ª–Ω–∞–º–∞ —Ç–æ–ª—Ç—ã—Ä—É"]]

# –ù–∞–∑–∞–¥ –∫–Ω–æ–ø–∫–∞
back_button_ru = [["üîô –ù–∞–∑–∞–¥"]]
back_button_kz = [["üîô “ö–∞–π—Ç—É"]]

# –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã

def main_keyboard(lang):
    return ReplyKeyboardMarkup(main_buttons_ru if lang == "ru" else main_buttons_kz, resize_keyboard=True)

def back_keyboard(lang):
    return ReplyKeyboardMarkup(back_button_ru if lang == "ru" else back_button_kz, resize_keyboard=True)

# –ö—É—Ä—Å—ã
COURSES = {
    "–ö—É—Ä—Å 0‚Äì3 –º–µ—Å—è—Ü–µ–≤": (
        "üåü <b>–ö—É—Ä—Å –¥–ª—è –º–ª–∞–¥–µ–Ω—Ü–µ–≤ 0‚Äì3 –º–µ—Å—è—Ü–µ–≤</b>\n\n"
        "–î–ª—è —Ä–æ–¥–∏—Ç–µ–ª–µ–π, –∂–µ–ª–∞—é—â–∏—Ö –ø–æ–Ω–∏–º–∞—Ç—å –º–∞–ª—ã—à–∞ —Å –ø–µ—Ä–≤—ã—Ö –¥–Ω–µ–π.\n"
        "üìå –ì—Ä—É–¥–Ω–æ–µ –≤—Å–∫–∞—Ä–º–ª–∏–≤–∞–Ω–∏–µ, –∫–æ–ª–∏–∫–∏, —Å–æ–Ω, –∂–µ–ª—Ç—É—Ö–∞, —Å—Ä—ã–≥–∏–≤–∞–Ω–∏—è.\n"
        "üßë‚Äç‚öïÔ∏è –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –æ–ø—ã—Ç–Ω–æ–≥–æ –Ω–µ–æ–Ω–∞—Ç–æ–ª–æ–≥–∞.\n"
        "\n<i>–§–æ—Ä–º–∞—Ç:</i> –£—Ä–æ–∫–∏ + –∞—É–¥–∏–æ –≤ Telegram\n"
        "<i>–î–æ—Å—Ç—É–ø:</i> 30 –¥–Ω–µ–π\n"
        "<b>–¶–µ–Ω–∞:</b> 70 000 —Ç–≥ / 130 $"
    ),
    "–ö—É—Ä—Å 3‚Äì6 –º–µ—Å—è—Ü–µ–≤": (
        "üåü <b>–ö—É—Ä—Å –¥–ª—è –º–∞–ª—ã—à–µ–π 3‚Äì6 –º–µ—Å—è—Ü–µ–≤</b>\n\n"
        "üîç –ú–æ—Ç–æ—Ä–Ω–æ–µ —Ä–∞–∑–≤–∏—Ç–∏–µ, –º–∞—Å—Å–∞–∂, —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è.\n"
        "üë∂ –†–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ —Å–∏–≥–Ω–∞–ª–æ–≤ –∏ —Å—Ç–∏–º—É–ª—è—Ü–∏—è —Ä–∞–∑–≤–∏—Ç–∏—è.\n"
        "\n<i>–§–æ—Ä–º–∞—Ç:</i> –í–∏–¥–µ–æ Telegram\n"
        "<i>–î–æ—Å—Ç—É–ø:</i> –ù–∞–≤—Å–µ–≥–¥–∞\n"
        "<b>–¶–µ–Ω–∞:</b> 30 000 —Ç–≥ / 6 000 —Ä—É–±"
    ),
    "–ù–∞—Å—Ç–∞–≤–Ω–∏—á–µ—Å—Ç–≤–æ –¥–ª—è –≤—Ä–∞—á–µ–π": (
        "üë©‚Äç‚öïÔ∏è <b>–ù–∞—Å—Ç–∞–≤–Ω–∏—á–µ—Å—Ç–≤–æ –¥–ª—è –≤—Ä–∞—á–µ–π</b>\n\n"
        "üìö 10 –æ–Ω–ª–∞–π–Ω-—É—Ä–æ–∫–æ–≤ + —Å–æ–ø—Ä–æ–≤–æ–∂–¥–µ–Ω–∏–µ –≤ —Ç–µ—á–µ–Ω–∏–µ 1 –º–µ—Å—è—Ü–∞.\n"
        "üë©‚Äç‚öïÔ∏è –ê–∫—Ç—É–∞–ª—å–Ω–æ –¥–ª—è –ø–µ–¥–∏–∞—Ç—Ä–æ–≤, –∞–∫—É—à–µ—Ä–æ–≤, –Ω–µ–æ–Ω–∞—Ç–æ–ª–æ–≥–æ–≤.\n"
        "üí° –ü—Ä–∞–∫—Ç–∏–∫–∞, –∫–µ–π—Å—ã, –ø–æ–¥–¥–µ—Ä–∂–∫–∞."
    )
}

# /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [["üá∑üá∫ –†—É—Å—Å–∫–∏–π", "üá∞üáø “ö–∞–∑–∞“õ—à–∞"]]
    await update.message.reply_text(
        "üë∂ <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ MyHelperBot!</b>\n\n"
        "‚ú® –ó–¥–µ—Å—å –≤—ã –Ω–∞–π–¥—ë—Ç–µ —Ç–µ–ø–ª–æ, –ø–æ–¥–¥–µ—Ä–∂–∫—É –∏ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–µ —Å–æ–≤–µ—Ç—ã –¥–ª—è –∑–¥–æ—Ä–æ–≤—å—è –≤–∞—à–µ–≥–æ –º–∞–ª—ã—à–∞.\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫ / –¢—ñ–ª–¥—ñ —Ç–∞“£–¥–∞“£—ã–∑:",
        reply_markup=ReplyKeyboardMarkup(keyboard, resize_keyboard=True),
        parse_mode="HTML"
    )
    return LANGUAGE

async def set_language(update: Update, context: ContextTypes.DEFAULT_TYPE):
    lang = "ru" if "–†—É—Å" in update.message.text else "kz"
    user_lang[update.effective_user.id] = lang
    text = (
        "‚ù§Ô∏è –°–ø–∞—Å–∏–±–æ –∑–∞ –≤—ã–±–æ—Ä —Ä—É—Å—Å–∫–æ–≥–æ —è–∑—ã–∫–∞! –ß–µ–º –º–æ–≥—É –±—ã—Ç—å –ø–æ–ª–µ–∑–µ–Ω?"
        if lang == "ru" else
        "‚ù§Ô∏è “ö–∞–∑–∞“õ —Ç—ñ–ª—ñ–Ω —Ç–∞“£–¥–∞“ì–∞–Ω—ã“£—ã–∑“ì–∞ —Ä–∞—Ö–º–µ—Ç! “ö–∞–ª–∞–π –∫”©–º–µ–∫—Ç–µ—Å–µ –∞–ª–∞–º—ã–Ω?"
    )
    await update.message.reply_text(text, reply_markup=main_keyboard(lang))
    return ConversationHandler.END

async def send_courses(update: Update, context: ContextTypes.DEFAULT_TYPE):
    lang = user_lang.get(update.effective_user.id, "ru")
    for title, description in COURSES.items():
        await update.message.reply_text(
            description,
            parse_mode="HTML",
            reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üìÖ –ó–∞–ø–∏—Å–∞—Ç—å—Å—è", callback_data="form")]])
        )

async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.callback_query.answer()
    return await ask_name(update, context)

async def ask_name(update: Update, context: ContextTypes.DEFAULT_TYPE):
    lang = user_lang.get(update.effective_user.id, "ru")
    text = "üìù –í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è:" if lang == "ru" else "üìù –ê—Ç—ã“£—ã–∑–¥—ã –µ–Ω–≥—ñ–∑—ñ“£—ñ–∑:"
    await (update.callback_query.message.reply_text(text) if update.callback_query else update.message.reply_text(text))
    return NAME

async def get_name(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["name"] = update.message.text.strip()
    lang = user_lang.get(update.effective_user.id, "ru")
    await update.message.reply_text(
        "üìû –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ (—Å +7):" if lang == "ru" else "üìû –¢–µ–ª–µ—Ñ–æ–Ω –Ω”©–º—ñ—Ä—ñ“£—ñ–∑–¥—ñ –µ–Ω–≥—ñ–∑—ñ“£—ñ–∑ (+7):"
    )
    return PHONE

async def get_phone(update: Update, context: ContextTypes.DEFAULT_TYPE):
    phone = update.message.text.strip()
    if not phone.startswith("+7") or len(phone) < 10:
        lang = user_lang.get(update.effective_user.id, "ru")
        msg = "‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ü—Ä–∏–º–µ—Ä: +7 777 123 4567" if lang == "ru" else "‚ö†Ô∏è “ö–∞—Ç–µ —Ñ–æ—Ä–º–∞—Ç. –ú—ã—Å–∞–ª—ã: +7 777 123 4567"
        await update.message.reply_text(msg)
        return PHONE

    name = context.user_data.get("name")
    if sheet:
        sheet.append_row([name, phone])
    lang = user_lang.get(update.effective_user.id, "ru")
    text = "‚úÖ –°–ø–∞—Å–∏–±–æ! –î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã." if lang == "ru" else "‚úÖ –†–∞“õ–º–µ—Ç! –ú”ô–ª—ñ–º–µ—Ç—Ç–µ—Ä —Å–∞“õ—Ç–∞–ª–¥—ã."
    await update.message.reply_text(text, reply_markup=main_keyboard(lang))
    return ConversationHandler.END

async def send_contacts(update: Update, context: ContextTypes.DEFAULT_TYPE):
    lang = user_lang.get(update.effective_user.id, "ru")
    msg = (
        "üìû <b>–ö–æ–Ω—Ç–∞–∫—Ç—ã:</b>\n\n"
        "‚Ä¢ Telegram ‚Äî <b>@merey_neonatologist</b>\n"
        "‚Ä¢ WhatsApp ‚Äî <b>+7 771 147 10 34</b>\n"
        "‚Ä¢ –ü—Ä–æ—Ñ–∏–ª—å –≤—Ä–∞—á–∞ –≤ Instagram ‚Äî <b>instagram.com/merey_neonatolog</b>"
        if lang == "ru" else
        "üìû <b>–ë–∞–π–ª–∞–Ω—ã—Å:</b>\n\n"
        "‚Ä¢ Telegram ‚Äî <b>@merey_neonatologist</b>\n"
        "‚Ä¢ WhatsApp ‚Äî <b>+7 771 147 10 34</b>\n"
        "‚Ä¢ –î”ô—Ä—ñ–≥–µ—Ä–¥—ñ“£ Instagram –ø–∞—Ä–∞“õ—à–∞—Å—ã ‚Äî <b>instagram.com/merey_neonatolog</b>"
    )
    await update.message.reply_text(msg, parse_mode="HTML")

async def unknown(update: Update, context: ContextTypes.DEFAULT_TYPE):
    lang = user_lang.get(update.effective_user.id, "ru")
    msg = "ü§î –ò–∑–≤–∏–Ω–∏—Ç–µ, —è –≤–∞—Å –Ω–µ –ø–æ–Ω—è–ª." if lang == "ru" else "ü§î –ö–µ—à—ñ—Ä—ñ“£—ñ–∑, –º–µ–Ω —Å—ñ–∑–¥—ñ —Ç“Ø—Å—ñ–Ω–±–µ–¥—ñ–º."
    await update.message.reply_text(msg)

# –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è

def main():
    app = ApplicationBuilder().token(BOT_TOKEN).build()

    conv_handler = ConversationHandler(
        entry_points=[
            MessageHandler(filters.Regex("–ó–∞–ø–æ–ª–Ω–∏—Ç—å –∞–Ω–∫–µ—Ç—É|–°–∞—É–∞–ª–Ω–∞–º–∞ —Ç–æ–ª—Ç—ã—Ä—É"), ask_name)
        ],
        states={
            NAME: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_name)],
            PHONE: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_phone)]
        },
        fallbacks=[]
    )

    app.add_handler(CommandHandler("start", start))
    app.add_handler(CallbackQueryHandler(button_handler))
    app.add_handler(conv_handler)
    app.add_handler(MessageHandler(filters.Regex("–†—É—Å—Å–∫–∏–π|“ö–∞–∑–∞“õ—à–∞"), set_language))
    app.add_handler(MessageHandler(filters.Regex("–ö—É—Ä—Å—ã|–ö—É—Ä—Å—Ç–∞—Ä"), send_courses))
    app.add_handler(MessageHandler(filters.Regex("–ö–æ–Ω—Ç–∞–∫—Ç—ã|–ë–∞–π–ª–∞–Ω—ã—Å"), send_contacts))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, unknown))

    logger.info("ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    app.run_polling()

if __name__ == '__main__':
    main()