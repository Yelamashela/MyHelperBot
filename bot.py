import os
import json
import logging
import datetime
import gspread
from google.oauth2.service_account import Credentials
from telegram import (
    Update, InlineKeyboardButton, InlineKeyboardMarkup
)
from telegram.ext import (
    ApplicationBuilder, CommandHandler, CallbackQueryHandler,
    MessageHandler, ConversationHandler, ContextTypes, filters
)

# --- –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ ---
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# --- –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è ---
BOT_TOKEN = os.getenv("BOT_TOKEN")
GOOGLE_CREDENTIALS = json.loads(os.getenv("GOOGLE_CREDENTIALS"))

# --- Google Sheets ---
try:
    scopes = [
        "https://www.googleapis.com/auth/spreadsheets",
        "https://www.googleapis.com/auth/drive"
    ]
    credentials = Credentials.from_service_account_info(GOOGLE_CREDENTIALS, scopes=scopes)
    client = gspread.authorize(credentials)
    sheet = client.open("MyHelperBot_–ê–Ω–∫–µ—Ç—ã").sheet1
except Exception as e:
    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Google Sheets: {e}")
    sheet = None

# --- –°–æ—Å—Ç–æ—è–Ω–∏—è ---
LANG, PROFILE, NAME, LOCATION, DOB, CONCERN, FORMAT, TRIED, READY = range(9)
user_lang = {}

# --- –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –ø–æ –ø—Ä–æ—Ñ–∏–ª—é ---
def get_main_menu(profile: str, lang: str):
    def btn(text, cb):
        return InlineKeyboardButton(text, callback_data=cb)

    if profile == "ü§± –Ø –º–∞–º–∞":
        buttons = [
            [btn("üì• –ê–Ω–∫–µ—Ç–∞", "form"), btn("üìö –ö—É—Ä—Å—ã", "courses")],
            [btn("ü©∫ –£—Å–ª—É–≥–∏", "services")],
            [btn("üìç –ö–æ–Ω—Ç–∞–∫—Ç—ã", "contacts")]
        ]
    elif profile == "ü§∞ –ë–µ—Ä–µ–º–µ–Ω–Ω–∞—è":
        buttons = [
            [btn("üì• –ê–Ω–∫–µ—Ç–∞", "form"), btn("ü§± –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ —Ä–æ–¥–∞–º", "doula")],
            [btn("üìö –ö—É—Ä—Å –¥–ª—è –±–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö", "pregnancy_course")],
            [btn("üìç –ö–æ–Ω—Ç–∞–∫—Ç—ã", "contacts")]
        ]
    elif profile == "ü©∫ –°–ø–µ—Ü–∏–∞–ª–∏—Å—Ç":
        buttons = [
            [btn("üåü –ù–∞—Å—Ç–∞–≤–Ω–∏—á–µ—Å—Ç–≤–æ", "mentorship")],
            [btn("üìç –ö–æ–Ω—Ç–∞–∫—Ç—ã", "contacts")]
        ]
    else:
        buttons = [[btn("üì• –ê–Ω–∫–µ—Ç–∞", "form")]]

    return InlineKeyboardMarkup(buttons)

# --- –°—Ç–∞—Ä—Ç ---
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [[
        InlineKeyboardButton("üá∑üá∫ –†—É—Å—Å–∫–∏–π", callback_data="lang_ru"),
        InlineKeyboardButton("üá∞üáø “ö–∞–∑–∞“õ—à–∞", callback_data="lang_kz")
    ]]
    await update.message.reply_text(
        "üë∂ <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ MyHelperBot!</b>\n\n"
        "‚ú® –Ø –ø–æ–º–æ–≥—É –≤–∞–º —Å –∑–∞–±–æ—Ç–æ–π, –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª–∏–∑–º–æ–º –∏ —Ç–µ–ø–ª–æ–º.\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫ / –¢—ñ–ª–¥—ñ —Ç–∞“£–¥–∞“£—ã–∑:",
        reply_markup=InlineKeyboardMarkup(keyboard),
        parse_mode="HTML"
    )

# --- –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —è–∑—ã–∫–∞ ---
async def set_language(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    user_id = query.from_user.id
    lang = "ru" if query.data == "lang_ru" else "kz"
    user_lang[user_id] = lang
    keyboard = [[
        InlineKeyboardButton("ü§± –Ø –º–∞–º–∞", callback_data="profile_mama"),
        InlineKeyboardButton("ü§∞ –ë–µ—Ä–µ–º–µ–Ω–Ω–∞—è", callback_data="profile_pregnant"),
        InlineKeyboardButton("ü©∫ –°–ø–µ—Ü–∏–∞–ª–∏—Å—Ç", callback_data="profile_doctor")
    ]]
    await query.edit_message_text(
        "üå∏ –î–∞–≤–∞–π—Ç–µ –Ω–∞—á–Ω—ë–º —Å –≤—ã–±–æ—Ä–∞, –∫—Ç–æ –≤—ã?" if lang == "ru" else "üå∏ –ê–ª–¥—ã–º–µ–Ω –∫—ñ–º –µ–∫–µ–Ω—ñ“£—ñ–∑–¥—ñ —Ç–∞“£–¥–∞“£—ã–∑:",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )

# --- –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø—Ä–æ—Ñ–∏–ª—è ---
async def set_profile(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    profile_map = {
        "profile_mama": "ü§± –Ø –º–∞–º–∞",
        "profile_pregnant": "ü§∞ –ë–µ—Ä–µ–º–µ–Ω–Ω–∞—è",
        "profile_doctor": "ü©∫ –°–ø–µ—Ü–∏–∞–ª–∏—Å—Ç"
    }
    profile = profile_map.get(query.data)
    context.user_data["profile"] = profile
    lang = user_lang.get(query.from_user.id, "ru")
    await query.edit_message_text(
        "‚úÖ –ü—Ä–æ—Ñ–∏–ª—å —Å–æ—Ö—Ä–∞–Ω—ë–Ω! –í–æ—Ç —á—Ç–æ —è —É–º–µ—é üëá" if lang == "ru" else "‚úÖ –ü—Ä–æ—Ñ–∏–ª—å —Å–∞“õ—Ç–∞–ª–¥—ã! –ú–µ–Ω —ñ—Å—Ç–µ–π –∞–ª–∞–º—ã–Ω üëá",
        reply_markup=get_main_menu(profile, lang)
    )

# --- –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫ ---
async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    data = query.data
    lang = user_lang.get(query.from_user.id, "ru")

    # –ü—Ä–∏–º–µ—Ä—ã –ø–æ–≤–µ–¥–µ–Ω–∏—è
    if data == "services":
        await query.edit_message_text(
            "ü©∫ –£—Å–ª—É–≥–∏ –≤—Ä–∞—á–∞-–Ω–µ–æ–Ω–∞—Ç–æ–ª–æ–≥–∞:\n\n- –û–Ω–ª–∞–π–Ω-–∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏\n- –í—ã–µ–∑–¥ –Ω–∞ –¥–æ–º\n- –°–æ–ø—Ä–æ–≤–æ–∂–¥–µ–Ω–∏–µ –ø–æ—Å–ª–µ —Ä–æ–¥–æ–≤\n\n–í—ã–±–µ—Ä–∏—Ç–µ –≤ –º–µ–Ω—é –Ω–∏–∂–µ, —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –ø–æ–¥—Ä–æ–±–Ω–µ–µ.",
            reply_markup=InlineKeyboardMarkup([[
                InlineKeyboardButton("üì• –ê–Ω–∫–µ—Ç–∞", callback_data="form"),
                InlineKeyboardButton("üìã –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="menu")
            ]])
        )
    elif data == "courses":
        await query.edit_message_text(
            "üìö –ö—É—Ä—Å—ã –¥–ª—è —Ä–æ–¥–∏—Ç–µ–ª–µ–π:\n\n- 0‚Äì3 –º–µ—Å—è—Ü–µ–≤\n- 3‚Äì6 –º–µ—Å—è—Ü–µ–≤\n- –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –∏ –∏–º–º—É–Ω–∏—Ç–µ—Ç\n\nüîú –ü–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏ —Å–∫–æ—Ä–æ –ø–æ—è–≤—è—Ç—Å—è!",
            reply_markup=InlineKeyboardMarkup([[
                InlineKeyboardButton("üì• –ê–Ω–∫–µ—Ç–∞", callback_data="form"),
                InlineKeyboardButton("üìã –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="menu")
            ]])
        )
    elif data == "contacts":
        await query.edit_message_text(
            "üì± –ö–æ–Ω—Ç–∞–∫—Ç—ã:\n\nWhatsApp: +7 771 147 10 34\nTelegram: @merey_neonatologist\n–ö–∞–Ω–∞–ª: https://t.me/+ohgaSD3VEQc5MGZi",
            reply_markup=InlineKeyboardMarkup([[
                InlineKeyboardButton("üì• –ó–∞–ø–æ–ª–Ω–∏—Ç—å –∞–Ω–∫–µ—Ç—É", callback_data="form"),
                InlineKeyboardButton("üìã –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="menu")
            ]])
        )
    elif data == "form":
        context.user_data["question"] = NAME
        await query.edit_message_text("üìù –î–∞–≤–∞–π—Ç–µ –Ω–∞—á–Ω—ë–º –∞–Ω–∫–µ—Ç—É!", parse_mode="HTML")
        return await ask_question(update, context)
    elif data == "menu":
        profile = context.user_data.get("profile", "ü§± –Ø –º–∞–º–∞")
        await query.edit_message_text("üìã –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=get_main_menu(profile, lang))

# --- –í–æ–ø—Ä–æ—Å—ã –∞–Ω–∫–µ—Ç—ã ---
questions = {
    NAME: "üìù –ö–∞–∫ –≤–∞—Å –∑–æ–≤—É—Ç?",
    LOCATION: "üåç –í –∫–∞–∫–æ–º –≤—ã –≥–æ—Ä–æ–¥–µ/—Å—Ç—Ä–∞–Ω–µ?",
    DOB: "üìÖ –î–∞—Ç–∞ —Ä–æ–¥–æ–≤?",
    CONCERN: "ü§î –ß—Ç–æ –≤–∞—Å –±–µ—Å–ø–æ–∫–æ–∏—Ç?",
    FORMAT: "üìå –ü—Ä–µ–¥–ø–æ—á—Ç–∏—Ç–µ–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç: –æ–Ω–ª–∞–π–Ω / –æ—Ñ—Ñ–ª–∞–π–Ω / –≤—ã–µ–∑–¥?",
    TRIED: "üîÑ –ß—Ç–æ —É–∂–µ –ø—Ä–æ–±–æ–≤–∞–ª–∏?",
    READY: "üí¨ –ì–æ—Ç–æ–≤—ã –∫ —Ä–∞–±–æ—Ç–µ –∏ –æ–ø–ª–∞—Ç–µ?"
}

async def ask_question(update: Update, context: ContextTypes.DEFAULT_TYPE):
    q_index = context.user_data.get("question", NAME)
    total = READY - NAME + 1
    progress = q_index - NAME + 1
    text = questions[q_index]
    await update.callback_query.message.reply_text(
        f"{text}\n\nüìä –®–∞–≥ {progress} –∏–∑ {total}"
    )
    context.user_data["question"] = q_index
    return q_index

async def handle_answer(update: Update, context: ContextTypes.DEFAULT_TYPE):
    q_index = context.user_data.get("question", NAME)
    context.user_data[q_index] = update.message.text
    q_index += 1
    if q_index > READY:
        if sheet:
            row = [context.user_data.get(q) for q in range(NAME, READY + 1)]
            sheet.append_row(row)
        lang = user_lang.get(update.effective_user.id, "ru")
        await update.message.reply_text(
            "‚úÖ –ê–Ω–∫–µ—Ç–∞ –ø–æ–ª—É—á–µ–Ω–∞! –ú—ã —Å –≤–∞–º–∏ —Å–≤—è–∂–µ–º—Å—è –≤ —Ç–µ—á–µ–Ω–∏–µ 24—á." if lang == "ru" else "‚úÖ –°–∞—É–∞–ª–Ω–∞–º–∞ “õ–∞–±—ã–ª–¥–∞–Ω–¥—ã! –ë—ñ–∑ —Å—ñ–∑–±–µ–Ω 24 —Å–∞“ì–∞—Ç —ñ—à—ñ–Ω–¥–µ —Ö–∞–±–∞—Ä–ª–∞—Å–∞–º—ã–∑."
        )
        profile = context.user_data.get("profile", "ü§± –Ø –º–∞–º–∞")
        await update.message.reply_text("üìã –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=get_main_menu(profile, lang))
        return ConversationHandler.END
    context.user_data["question"] = q_index
    return await ask_question(update, context)

# --- –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ ---
async def unknown(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("ü§ó –Ø —Ä—è–¥–æ–º. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–µ–Ω—é.")

# --- –û—Å–Ω–æ–≤–Ω–æ–π –∑–∞–ø—É—Å–∫ ---
def main():
    app = ApplicationBuilder().token(BOT_TOKEN).build()

    form_conv = ConversationHandler(
        entry_points=[CallbackQueryHandler(button_handler, pattern="^form$")],
        states={q: [MessageHandler(filters.TEXT & ~filters.COMMAND, handle_answer)] for q in range(NAME, READY + 1)},
        fallbacks=[]
    )

    app.add_handler(CommandHandler("start", start))
    app.add_handler(CallbackQueryHandler(set_language, pattern="^lang_"))
    app.add_handler(CallbackQueryHandler(set_profile, pattern="^profile_"))
    app.add_handler(CallbackQueryHandler(button_handler))
    app.add_handler(form_conv)
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, unknown))

    logger.info("ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    app.run_polling()

if __name__ == "__main__":
    main()